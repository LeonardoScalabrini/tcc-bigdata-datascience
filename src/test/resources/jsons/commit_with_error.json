{
  "sha":"318f811fead95c4a363d776e968b0b1a4a112c86",
  "node_id":"MDY6Q29tbWl0MjI3OTA0ODg6MzE4ZjgxMWZlYWQ5NWM0YTM2M2Q3NzZlOTY4YjBiMWE0YTExMmM4Ng==",
  "commit":{
    "author":{
      "name":"Pawel Zawitowski",
      "email":"zawito@gmail.com",
      "date":"2019-09-03T18:50:48Z"
    },
    "committer":{
      "name":"Ilkka Seppälä",
      "email":"iluwatar@users.noreply.github.com",
      "date":"2019-09-03T18:50:48Z"
    },
    "message":"Bytecode pattern #553 (#896)\n\n* Added bytecode pattern\r\n\r\n* Diagram changed and added licence information\r\n\r\n* Added bytecode module to main pom.\r\n\r\n* Fixed missing dependency error",
    "tree":{
      "sha":"9874d172449369e4fb268d211b4d4810dbeda4e4",
      "url":"https://api.github.com/repos/iluwatar/java-design-patterns/git/trees/9874d172449369e4fb268d211b4d4810dbeda4e4"
    },
    "url":"https://api.github.com/repos/iluwatar/java-design-patterns/git/commits/318f811fead95c4a363d776e968b0b1a4a112c86",
    "comment_count":0,
    "verification":{
      "verified":false,
      "reason":"unsigned",
      "signature":null,
      "payload":null
    }
  },
  "url":"https://api.github.com/repos/iluwatar/java-design-patterns/commits/318f811fead95c4a363d776e968b0b1a4a112c86",
  "html_url":"https://github.com/iluwatar/java-design-patterns/commit/318f811fead95c4a363d776e968b0b1a4a112c86",
  "comments_url":"https://api.github.com/repos/iluwatar/java-design-patterns/commits/318f811fead95c4a363d776e968b0b1a4a112c86/comments",
  "author":{
    "login":"pzawitowski",
    "id":16446841,
    "node_id":"MDQ6VXNlcjE2NDQ2ODQx",
    "avatar_url":"https://avatars0.githubusercontent.com/u/16446841?v=4",
    "gravatar_id":"",
    "url":"https://api.github.com/users/pzawitowski",
    "html_url":"https://github.com/pzawitowski",
    "followers_url":"https://api.github.com/users/pzawitowski/followers",
    "following_url":"https://api.github.com/users/pzawitowski/following{/other_user}",
    "gists_url":"https://api.github.com/users/pzawitowski/gists{/gist_id}",
    "starred_url":"https://api.github.com/users/pzawitowski/starred{/owner}{/repo}",
    "subscriptions_url":"https://api.github.com/users/pzawitowski/subscriptions",
    "organizations_url":"https://api.github.com/users/pzawitowski/orgs",
    "repos_url":"https://api.github.com/users/pzawitowski/repos",
    "events_url":"https://api.github.com/users/pzawitowski/events{/privacy}",
    "received_events_url":"https://api.github.com/users/pzawitowski/received_events",
    "type":"User",
    "site_admin":false
  },
  "committer":{
    "login":"iluwatar",
    "id":582346,
    "node_id":"MDQ6VXNlcjU4MjM0Ng==",
    "avatar_url":"https://avatars1.githubusercontent.com/u/582346?v=4",
    "gravatar_id":"",
    "url":"https://api.github.com/users/iluwatar",
    "html_url":"https://github.com/iluwatar",
    "followers_url":"https://api.github.com/users/iluwatar/followers",
    "following_url":"https://api.github.com/users/iluwatar/following{/other_user}",
    "gists_url":"https://api.github.com/users/iluwatar/gists{/gist_id}",
    "starred_url":"https://api.github.com/users/iluwatar/starred{/owner}{/repo}",
    "subscriptions_url":"https://api.github.com/users/iluwatar/subscriptions",
    "organizations_url":"https://api.github.com/users/iluwatar/orgs",
    "repos_url":"https://api.github.com/users/iluwatar/repos",
    "events_url":"https://api.github.com/users/iluwatar/events{/privacy}",
    "received_events_url":"https://api.github.com/users/iluwatar/received_events",
    "type":"User",
    "site_admin":false
  },
  "parents":[
    {
      "sha":"7f6067f19fe03c41cc25f704dbdab93b5069f0cb",
      "url":"https://api.github.com/repos/iluwatar/java-design-patterns/commits/7f6067f19fe03c41cc25f704dbdab93b5069f0cb",
      "html_url":"https://github.com/iluwatar/java-design-patterns/commit/7f6067f19fe03c41cc25f704dbdab93b5069f0cb"
    }
  ],
  "stats":{
    "total":819,
    "additions":819,
    "deletions":0
  },
  "files":[
    {
      "sha":"d2fc45e1e2d1c4d0e6b69631004539178a324298",
      "filename":"bytecode/README.md",
      "status":"added",
      "additions":25,
      "deletions":0,
      "changes":25,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/README.md",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/README.md",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/README.md?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,25 @@\n+---\n+layout: pattern\n+title: Bytecode\n+folder: bytecode\n+permalink: /patterns/bytecode/\n+categories: Behavioral\n+tags:\n+ - Java\n+ - Difficulty-Beginner\n+---\n+\n+## Intent\n+Allows to encode behaviour as instructions for virtual machine.\n+\n+## Applicability\n+Use the Bytecode pattern when you have a lot of behavior you need to define and your\n+game’s implementation language isn’t a good fit because:\n+\n+* it’s too low-level, making it tedious or error-prone to program in.\n+* iterating on it takes too long due to slow compile times or other tooling issues.\n+* it has too much trust. If you want to ensure the behavior being defined can’t break the game, you need to sandbox it from the rest of the codebase.\n+\n+## Credits\n+\n+* [Game programming patterns](http://gameprogrammingpatterns.com/bytecode.html)"
    },
    {
      "sha":"31b6bc6edba64cfb51910e5d2c5322be46e7c075",
      "filename":"bytecode/etc/bytecode.png",
      "status":"added",
      "additions":0,
      "deletions":0,
      "changes":0,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/etc/bytecode.png",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/etc/bytecode.png",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/etc/bytecode.png?ref=318f811fead95c4a363d776e968b0b1a4a112c86"
    },
    {
      "sha":"3ec3904589562ca787c6c997b4a03f8796969907",
      "filename":"bytecode/etc/bytecode.ucls",
      "status":"added",
      "additions":49,
      "deletions":0,
      "changes":49,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/etc/bytecode.ucls",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/etc/bytecode.ucls",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/etc/bytecode.ucls?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<class-diagram version=\"1.2.3\" icons=\"true\" always-add-relationships=\"false\" generalizations=\"true\" realizations=\"true\" \n+  associations=\"true\" dependencies=\"false\" nesting-relationships=\"true\" router=\"FAN\">  \n+  <class id=\"1\" language=\"java\" name=\"com.iluwatar.bytecode.VirtualMachine\" project=\"bytecode\" \n+    file=\"/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java\" binary=\"false\" corner=\"BOTTOM_RIGHT\">    \n+    <position height=\"-1\" width=\"-1\" x=\"455\" y=\"173\"/>    \n+    <display autosize=\"true\" stereotype=\"true\" package=\"true\" initial-value=\"false\" signature=\"true\" \n+      sort-features=\"false\" accessors=\"true\" visibility=\"true\">      \n+      <attributes public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>      \n+      <operations public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>    \n+    </display>  \n+  </class>  \n+  <class id=\"2\" language=\"java\" name=\"com.iluwatar.bytecode.App\" project=\"bytecode\" \n+    file=\"/bytecode/src/main/java/com/iluwatar/bytecode/App.java\" binary=\"false\" corner=\"BOTTOM_RIGHT\">    \n+    <position height=\"-1\" width=\"-1\" x=\"148\" y=\"110\"/>    \n+    <display autosize=\"true\" stereotype=\"true\" package=\"true\" initial-value=\"false\" signature=\"true\" \n+      sort-features=\"false\" accessors=\"true\" visibility=\"true\">      \n+      <attributes public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>      \n+      <operations public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>    \n+    </display>  \n+  </class>  \n+  <class id=\"3\" language=\"java\" name=\"com.iluwatar.bytecode.Wizard\" project=\"bytecode\" \n+    file=\"/bytecode/src/main/java/com/iluwatar/bytecode/Wizard.java\" binary=\"false\" corner=\"BOTTOM_RIGHT\">    \n+    <position height=\"-1\" width=\"-1\" x=\"148\" y=\"416\"/>    \n+    <display autosize=\"true\" stereotype=\"true\" package=\"true\" initial-value=\"false\" signature=\"true\" \n+      sort-features=\"false\" accessors=\"true\" visibility=\"true\">      \n+      <attributes public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>      \n+      <operations public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>    \n+    </display>  \n+  </class>  \n+  <association id=\"4\">    \n+    <end type=\"SOURCE\" refId=\"1\" navigable=\"false\" variant=\"ASSOCIATION\">      \n+      <attribute id=\"5\" name=\"wizards\">        \n+        <position height=\"18\" width=\"48\" x=\"296\" y=\"291\"/>      \n+      </attribute>      \n+      <multiplicity id=\"6\" minimum=\"0\" maximum=\"2147483647\">        \n+        <position height=\"0\" width=\"0\" x=\"-327\" y=\"-27\"/>      \n+      </multiplicity>    \n+    </end>    \n+    <end type=\"TARGET\" refId=\"3\" navigable=\"true\" variant=\"ASSOCIATION\"/>    \n+    <display labels=\"true\" multiplicity=\"true\"/>  \n+  </association>  \n+  <classifier-display autosize=\"true\" stereotype=\"true\" package=\"true\" initial-value=\"false\" signature=\"true\" \n+    sort-features=\"false\" accessors=\"true\" visibility=\"true\">    \n+    <attributes public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>    \n+    <operations public=\"true\" package=\"true\" protected=\"true\" private=\"true\" static=\"true\"/>  \n+  </classifier-display>  \n+  <association-display labels=\"true\" multiplicity=\"true\"/>\n+</class-diagram>\n\\ No newline at end of file"
    },
    {
      "sha":"e9e6247f8eb2e02f0f9e81c594511c8f0bfea116",
      "filename":"bytecode/pom.xml",
      "status":"added",
      "additions":45,
      "deletions":0,
      "changes":45,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/pom.xml",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/pom.xml",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/pom.xml?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    The MIT License\n+    Copyright (c) 2019 Ilkka Seppälä\n+\n+    Permission is hereby granted, free of charge, to any person obtaining a copy\n+    of this software and associated documentation files (the \"Software\"), to deal\n+    in the Software without restriction, including without limitation the rights\n+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+    copies of the Software, and to permit persons to whom the Software is\n+    furnished to do so, subject to the following conditions:\n+\n+    The above copyright notice and this permission notice shall be included in\n+    all copies or substantial portions of the Software.\n+\n+    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+    THE SOFTWARE.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>java-design-patterns</artifactId>\n+        <groupId>com.iluwatar</groupId>\n+        <version>1.21.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>bytecode</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+</project>\n\\ No newline at end of file"
    },
    {
      "sha":"90b97bd33308bb4b969add29d4771016420ab62f",
      "filename":"bytecode/src/main/java/com/iluwatar/bytecode/App.java",
      "status":"added",
      "additions":79,
      "deletions":0,
      "changes":79,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/App.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/App.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/main/java/com/iluwatar/bytecode/App.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,79 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+import com.iluwatar.bytecode.util.InstructionConverterUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The intention of Bytecode pattern is to give behavior the flexibility of data by encoding it as instructions\n+ * for a virtual machine.\n+ * An instruction set defines the low-level operations that can be performed. A series of instructions is encoded as\n+ * a sequence of bytes. A virtual machine executes these instructions one at a time,\n+ * using a stack for intermediate values. By combining instructions, complex high-level behavior can be defined.\n+ *\n+ * This pattern should be used when there is a need to define high number of behaviours and implementation engine\n+ * is not a good choice because\n+ * It is too lowe level\n+ * Iterating on it takes too long due to slow compile times or other tooling issues.\n+ * It has too much trust. If you want to ensure the behavior being defined can’t break the game,\n+ * you need to sandbox it from the rest of the codebase.\n+ *\n+ */\n+public class App {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n+\n+  /**\n+   * Main app method\n+   * @param args command line args\n+   */\n+  public static void main(String[] args) {\n+    VirtualMachine vm = new VirtualMachine();\n+\n+    Wizard wizard = new Wizard();\n+    wizard.setHealth(45);\n+    wizard.setAgility(7);\n+    wizard.setWisdom(11);\n+    vm.getWizards()[0] = wizard;\n+\n+    interpretInstruction(\"LITERAL 0\", vm);\n+    interpretInstruction( \"LITERAL 0\", vm);\n+    interpretInstruction( \"GET_HEALTH\", vm);\n+    interpretInstruction( \"LITERAL 0\", vm);\n+    interpretInstruction( \"GET_AGILITY\", vm);\n+    interpretInstruction( \"LITERAL 0\", vm);\n+    interpretInstruction( \"GET_WISDOM \", vm);\n+    interpretInstruction( \"ADD\", vm);\n+    interpretInstruction( \"LITERAL 2\", vm);\n+    interpretInstruction( \"DIVIDE\", vm);\n+    interpretInstruction( \"ADD\", vm);\n+    interpretInstruction( \"SET_HEALTH\", vm);\n+  }\n+\n+  private static void interpretInstruction(String instruction, VirtualMachine vm) {\n+    InstructionConverterUtil converter = new InstructionConverterUtil();\n+    vm.execute(converter.convertToByteCode(instruction));\n+    LOGGER.info(instruction + String.format(\"%\" + (12 - instruction.length()) + \"s\", \"\" ) + vm.getStack());\n+  }\n+}"
    },
    {
      "sha":"2ceb66e3bdc2158e39e404f83c9acd9aa4a5f7bd",
      "filename":"bytecode/src/main/java/com/iluwatar/bytecode/Instruction.java",
      "status":"added",
      "additions":65,
      "deletions":0,
      "changes":65,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/Instruction.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/Instruction.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/main/java/com/iluwatar/bytecode/Instruction.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,65 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+/**\n+ * Representation of instructions understandable by virtual machine\n+ */\n+public enum Instruction {\n+\n+  LITERAL(1),\n+  SET_HEALTH(2),\n+  SET_WISDOM (3),\n+  SET_AGILITY(4),\n+  PLAY_SOUND(5),\n+  SPAWN_PARTICLES(6),\n+  GET_HEALTH(7),\n+  GET_AGILITY(8),\n+  GET_WISDOM(9),\n+  ADD(10),\n+  DIVIDE (11);\n+\n+  private int value;\n+\n+  Instruction(int value) {\n+    this.value = value;\n+  }\n+\n+  public int getIntValue() {\n+    return value;\n+  }\n+\n+  /**\n+   * Converts integer value to Instruction\n+   * @param value value of instruction\n+   * @return representation of the instruction\n+   */\n+  public static Instruction getInstruction(int value) {\n+    for (int i = 0; i < Instruction.values().length; i++) {\n+      if (Instruction.values()[i].getIntValue() == value) {\n+        return Instruction.values()[i];\n+      }\n+    }\n+    throw new IllegalArgumentException(\"Invalid instruction value\");\n+  }\n+}"
    },
    {
      "sha":"aedafe514dcecccfbc628ec1a38140575755a6cb",
      "filename":"bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java",
      "status":"added",
      "additions":142,
      "deletions":0,
      "changes":142,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/main/java/com/iluwatar/bytecode/VirtualMachine.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,142 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+import java.util.Stack;\n+\n+/**\n+ * Implementation of virtual machine\n+ */\n+public class VirtualMachine {\n+\n+  private Stack<Integer> stack = new Stack();\n+\n+  private Wizard[] wizards = new Wizard[2];\n+\n+  /**\n+   * Constructor\n+   */\n+  public VirtualMachine() {\n+    for (int i = 0; i < wizards.length; i++) {\n+      wizards[i] = new Wizard();\n+    }\n+  }\n+\n+  /**\n+   * Executes provided bytecode\n+   * @param bytecode to execute\n+   */\n+  public void execute(int[] bytecode) {\n+    for (int i = 0; i < bytecode.length; i++) {\n+      Instruction instruction = Instruction.getInstruction(bytecode[i]);\n+      int wizard;\n+      int amount;\n+      switch (instruction) {\n+        case LITERAL:\n+          // Read the next byte from the bytecode.\n+          int value = bytecode[++i];\n+          stack.push(value);\n+          break;\n+        case SET_AGILITY:\n+          amount = stack.pop();\n+          wizard = stack.pop();\n+          setAgility(wizard, amount);\n+          break;\n+        case SET_WISDOM:\n+          amount = stack.pop();\n+          wizard = stack.pop();\n+          setWisdom(wizard, amount);\n+          break;\n+        case SET_HEALTH:\n+          amount = stack.pop();\n+          wizard = stack.pop();\n+          setHealth(wizard, amount);\n+          break;\n+        case GET_HEALTH:\n+          wizard = stack.pop();\n+          stack.push(getHealth(wizard));\n+          break;\n+        case GET_AGILITY:\n+          wizard = stack.pop();\n+          stack.push(getAgility(wizard));\n+          break;\n+        case GET_WISDOM:\n+          wizard = stack.pop();\n+          stack.push(getWisdom(wizard));\n+          break;\n+        case ADD:\n+          int a = stack.pop();\n+          int b = stack.pop();\n+          stack.push(a + b);\n+          break;\n+        case DIVIDE:\n+          a = stack.pop();\n+          b = stack.pop();\n+          stack.push(b / a);\n+          break;\n+        case PLAY_SOUND:\n+          wizard = stack.pop();\n+          getWizards()[wizard].playSound();\n+          break;\n+        case SPAWN_PARTICLES:\n+          wizard = stack.pop();\n+          getWizards()[wizard].spawnParticles();\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Invalid instruction value\");\n+      }\n+    }\n+  }\n+\n+  public Stack<Integer> getStack() {\n+    return stack;\n+  }\n+\n+  public void setHealth(int wizard, int amount) {\n+    wizards[wizard].setHealth(amount);\n+  }\n+\n+  public void setWisdom(int wizard, int amount) {\n+    wizards[wizard].setWisdom(amount);\n+  }\n+\n+  public void setAgility(int wizard, int amount) {\n+    wizards[wizard].setAgility(amount);\n+  }\n+\n+  public int getHealth(int wizard) {\n+    return wizards[wizard].getHealth();\n+  }\n+\n+  public int getWisdom(int wizard) {\n+    return wizards[wizard].getWisdom();\n+  }\n+\n+  public int getAgility(int wizard) {\n+    return wizards[wizard].getAgility();\n+  }\n+\n+  public Wizard[] getWizards() {\n+    return wizards;\n+  }\n+}"
    },
    {
      "sha":"ca47fd28f873d2a5fb30b250650d51babf4c0ddd",
      "filename":"bytecode/src/main/java/com/iluwatar/bytecode/Wizard.java",
      "status":"added",
      "additions":83,
      "deletions":0,
      "changes":83,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/Wizard.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/Wizard.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/main/java/com/iluwatar/bytecode/Wizard.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,83 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class represent game objects which properties can be changed by instructions interpreted by virtual machine\n+ */\n+public class Wizard {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(Wizard.class);\n+\n+  private int health;\n+\n+  private int agility;\n+  private int wisdom;\n+\n+  private int numberOfPlayedSounds;\n+  private int numberOfSpawnedParticles;\n+\n+  public int getHealth() {\n+    return health;\n+  }\n+\n+  public void setHealth(int health) {\n+    this.health = health;\n+  }\n+\n+  public int getAgility() {\n+    return agility;\n+  }\n+\n+  public void setAgility(int agility) {\n+    this.agility = agility;\n+  }\n+\n+  public int getWisdom() {\n+    return wisdom;\n+  }\n+\n+  public void setWisdom(int wisdom) {\n+    this.wisdom = wisdom;\n+  }\n+\n+  public void playSound() {\n+    LOGGER.info(\"Playing sound\");\n+    numberOfPlayedSounds++;\n+  }\n+\n+  public void spawnParticles() {\n+    LOGGER.info(\"Spawning particles\");\n+    numberOfSpawnedParticles++;\n+  }\n+\n+  public int getNumberOfPlayedSounds() {\n+    return numberOfPlayedSounds;\n+  }\n+\n+  public int getNumberOfSpawnedParticles() {\n+    return numberOfSpawnedParticles;\n+  }\n+}"
    },
    {
      "sha":"202784d5a96c1dfcfaf0ca3d66e2dac96d60f2bd",
      "filename":"bytecode/src/main/java/com/iluwatar/bytecode/util/InstructionConverterUtil.java",
      "status":"added",
      "additions":76,
      "deletions":0,
      "changes":76,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/util/InstructionConverterUtil.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/main/java/com/iluwatar/bytecode/util/InstructionConverterUtil.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/main/java/com/iluwatar/bytecode/util/InstructionConverterUtil.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,76 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode.util;\n+\n+import com.iluwatar.bytecode.Instruction;\n+\n+/**\n+ * Utility class used for instruction validation and conversion\n+ */\n+public class InstructionConverterUtil {\n+  /**\n+   * Converts instructions represented as String\n+   *\n+   * @param instructions to convert\n+   * @return array of int representing bytecode\n+   */\n+  public static int[] convertToByteCode(String instructions) {\n+    if (instructions == null || instructions.trim().length() == 0) {\n+      return new int[0];\n+    }\n+\n+    String[] splitedInstructions = instructions.trim().split(\" \");\n+    int[] bytecode = new int[splitedInstructions.length];\n+    for (int i = 0; i < splitedInstructions.length; i++) {\n+      if (isValidInstruction(splitedInstructions[i])) {\n+        bytecode[i] = Instruction.valueOf(splitedInstructions[i]).getIntValue();\n+      } else if (isValidInt(splitedInstructions[i])) {\n+        bytecode[i] = Integer.valueOf(splitedInstructions[i]);\n+      } else {\n+        throw new IllegalArgumentException(\"Invalid instruction or number: \" + splitedInstructions[i]);\n+      }\n+    }\n+\n+    return bytecode;\n+  }\n+\n+  private static boolean isValidInstruction(String instruction) {\n+    try {\n+      Instruction.valueOf(instruction);\n+      return true;\n+    } catch (IllegalArgumentException e) {\n+      return false;\n+    }\n+  }\n+\n+  private static boolean isValidInt(String value) {\n+    try {\n+      Integer.parseInt(value);\n+      return true;\n+    } catch (NumberFormatException e) {\n+      return false;\n+    }\n+  }\n+\n+\n+}"
    },
    {
      "sha":"014ec787569cff5b1676372edd888df3eef5fb13",
      "filename":"bytecode/src/test/java/com/iluwatar/bytecode/AppTest.java",
      "status":"added",
      "additions":37,
      "deletions":0,
      "changes":37,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/AppTest.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/AppTest.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/test/java/com/iluwatar/bytecode/AppTest.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,37 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Application test\n+ */\n+public class AppTest {\n+\n+  @Test\n+  public void test() {\n+    String[] args = {};\n+    App.main(args);\n+  }\n+}"
    },
    {
      "sha":"e4379c9ede387407cab25fa6a34a587fbd4628df",
      "filename":"bytecode/src/test/java/com/iluwatar/bytecode/VirtualMachineTest.java",
      "status":"added",
      "additions":154,
      "deletions":0,
      "changes":154,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/VirtualMachineTest.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/VirtualMachineTest.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/test/java/com/iluwatar/bytecode/VirtualMachineTest.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,154 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static com.iluwatar.bytecode.Instruction.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Test for {@Link VirtualMachine}\n+ */\n+public class VirtualMachineTest {\n+\n+  @Test\n+  public void testLiteral() {\n+    int[] bytecode = new int[2];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = 10;\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(1, vm.getStack().size());\n+    assertEquals(Integer.valueOf(10), vm.getStack().pop());\n+  }\n+\n+  @Test\n+  public void testSetHealth() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[5];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = LITERAL.getIntValue();\n+    bytecode[3] = 50;                        // health amount\n+    bytecode[4] = SET_HEALTH.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(50, vm.getWizards()[wizardNumber].getHealth());\n+  }\n+\n+  @Test\n+  public void testSetAgility() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[5];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = LITERAL.getIntValue();\n+    bytecode[3] = 50;                        // agility amount\n+    bytecode[4] = SET_AGILITY.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(50, vm.getWizards()[wizardNumber].getAgility());\n+  }\n+\n+  @Test\n+  public void testSetWisdom() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[5];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = LITERAL.getIntValue();\n+    bytecode[3] = 50;                        // wisdom amount\n+    bytecode[4] = SET_WISDOM.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(50, vm.getWizards()[wizardNumber].getWisdom());\n+  }\n+\n+  @Test\n+  public void testGetHealth() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[8];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = LITERAL.getIntValue();\n+    bytecode[3] = 50;                        // health amount\n+    bytecode[4] = SET_HEALTH.getIntValue();\n+    bytecode[5] = LITERAL.getIntValue();;\n+    bytecode[6] = wizardNumber;\n+    bytecode[7] = GET_HEALTH.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(Integer.valueOf(50), vm.getStack().pop());\n+  }\n+\n+  @Test\n+  public void testPlaySound() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[3];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = PLAY_SOUND.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(0, vm.getStack().size());\n+    assertEquals(1, vm.getWizards()[0].getNumberOfPlayedSounds());\n+  }\n+\n+  @Test\n+  public void testSpawnParticles() {\n+    int wizardNumber = 0;\n+    int[] bytecode = new int[3];\n+    bytecode[0] = LITERAL.getIntValue();\n+    bytecode[1] = wizardNumber;\n+    bytecode[2] = SPAWN_PARTICLES.getIntValue();\n+\n+    VirtualMachine vm = new VirtualMachine();\n+    vm.execute(bytecode);\n+\n+    assertEquals(0, vm.getStack().size());\n+    assertEquals(1, vm.getWizards()[0].getNumberOfSpawnedParticles());\n+  }\n+\n+  @Test\n+  public void testInvalidInstruction() {\n+    int[] bytecode = new int[1];\n+    bytecode[0] = 999;\n+    VirtualMachine vm = new VirtualMachine();\n+\n+    assertThrows(IllegalArgumentException.class, () -> vm.execute(bytecode));\n+  }\n+}"
    },
    {
      "sha":"4743ac109e12e06e5ff3812d6491159aa84c8c7a",
      "filename":"bytecode/src/test/java/com/iluwatar/bytecode/util/InstructionConverterUtilTest.java",
      "status":"added",
      "additions":63,
      "deletions":0,
      "changes":63,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/util/InstructionConverterUtilTest.java",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/bytecode/src/test/java/com/iluwatar/bytecode/util/InstructionConverterUtilTest.java",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/bytecode/src/test/java/com/iluwatar/bytecode/util/InstructionConverterUtilTest.java?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -0,0 +1,63 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2014 Ilkka Seppälä\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package com.iluwatar.bytecode.util;\n+\n+import com.iluwatar.bytecode.Instruction;\n+import com.iluwatar.bytecode.util.InstructionConverterUtil;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@Link InstructionConverterUtil}\n+ */\n+public class InstructionConverterUtilTest {\n+  @Test\n+  public void testEmptyInstruction() {\n+    String instruction = \"\";\n+\n+    int[] bytecode = InstructionConverterUtil.convertToByteCode(instruction);\n+\n+    Assertions.assertEquals(0, bytecode.length);\n+  }\n+\n+  @Test\n+  public void testInstructions() {\n+    String instructions =\n+        \"LITERAL 35 SET_HEALTH SET_WISDOM SET_AGILITY PLAY_SOUND SPAWN_PARTICLES GET_HEALTH ADD DIVIDE\";\n+\n+    int[] bytecode = InstructionConverterUtil.convertToByteCode(instructions);\n+\n+    Assertions.assertEquals(10, bytecode.length);\n+    Assertions.assertEquals(Instruction.LITERAL.getIntValue(), bytecode[0]);\n+    Assertions.assertEquals(35, bytecode[1]);\n+    Assertions.assertEquals(Instruction.SET_HEALTH.getIntValue(), bytecode[2]);\n+    Assertions.assertEquals(Instruction.SET_WISDOM.getIntValue(), bytecode[3]);\n+    Assertions.assertEquals(Instruction.SET_AGILITY.getIntValue(), bytecode[4]);\n+    Assertions.assertEquals(Instruction.PLAY_SOUND.getIntValue(), bytecode[5]);\n+    Assertions.assertEquals(Instruction.SPAWN_PARTICLES.getIntValue(), bytecode[6]);\n+    Assertions.assertEquals(Instruction.GET_HEALTH.getIntValue(), bytecode[7]);\n+    Assertions.assertEquals(Instruction.ADD.getIntValue(), bytecode[8]);\n+    Assertions.assertEquals(Instruction.DIVIDE.getIntValue(), bytecode[9]);\n+  }\n+\n+}"
    },
    {
      "sha":"c55ed6492211aea776ffa77966210025d8c65a2c",
      "filename":"pom.xml",
      "status":"modified",
      "additions":1,
      "deletions":0,
      "changes":1,
      "blob_url":"https://github.com/iluwatar/java-design-patterns/blob/318f811fead95c4a363d776e968b0b1a4a112c86/pom.xml",
      "raw_url":"https://github.com/iluwatar/java-design-patterns/raw/318f811fead95c4a363d776e968b0b1a4a112c86/pom.xml",
      "contents_url":"https://api.github.com/repos/iluwatar/java-design-patterns/contents/pom.xml?ref=318f811fead95c4a363d776e968b0b1a4a112c86",
      "patch":"@@ -171,6 +171,7 @@\n         <module>priority-queue</module>\n \t    <module>commander</module>\n \t    <module>typeobjectpattern</module>\n+        <module>bytecode</module>\n     </modules>\n \n     <repositories>"
    }
  ]
}